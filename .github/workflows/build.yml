name: Build from Private Repo

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'windows-latest'
            target: 'x86_64-pc-windows-msvc'
          - platform: 'macos-latest'
            target: 'universal-apple-darwin'
          - platform: 'ubuntu-22.04'
            target: 'x86_64-unknown-linux-gnu'

    runs-on: ${{ matrix.platform }}
    
    steps:
      # 步骤 1: Checkout 公开仓库
      - name: Checkout public repo
        uses: actions/checkout@v4

      # 步骤 2: 配置 SSH 以访问私有仓库
      - name: Setup SSH for private repo
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_KEY }}
        shell: bash
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          
      # 步骤 2.5: 验证 SSH 密钥
      - name: Verify SSH key
        shell: bash
        run: |
          echo "Testing SSH connection to GitHub..."
          ssh -T git@github.com || true

      # 步骤 3: 克隆私有仓库源代码
      - name: Clone private repository
        shell: bash
        run: |
          git clone git@github.com:mobai25xa/mywarp.git source
          cd source
          echo "Cloned commit: $(git rev-parse HEAD)"
          
      # 步骤 4: 设置构建环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './source/src-tauri -> target'

      # 步骤 5: 安装平台依赖
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential curl wget file \
            libssl-dev libayatana-appindicator3-dev \
            librsvg2-dev patchelf

      # 步骤 6: 安装依赖并构建
      - name: Install dependencies
        working-directory: ./source
        run: pnpm install --frozen-lockfile

      - name: Build application
        working-directory: ./source
        run: pnpm tauri build --target ${{ matrix.target }}

      # 步骤 7: 上传构建产物
      - name: Upload artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64
          path: |
            source/src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
            source/src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe
          retention-days: 7

      - name: Upload artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal
          path: |
            source/src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
          retention-days: 7

      - name: Upload artifacts (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64
          path: |
            source/src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
            source/src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage
          retention-days: 7

  # 创建 Release
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## 🎉 MyWarp ${{ github.ref_name }}
            
            ### 📦 下载安装包
            - **Windows**: 下载 `.msi` 或 `.exe` 文件
            - **macOS**: 下载 `.dmg` 文件
            - **Linux**: 下载 `.deb` 或 `.AppImage` 文件
            
            ### 🔄 自动更新
            应用程序会自动检测并提示更新。
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
